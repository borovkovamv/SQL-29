--=============== МОДУЛЬ 5. РАБОТА С POSTGRESQL =======================================
--= ПОМНИТЕ, ЧТО НЕОБХОДИМО УСТАНОВИТЬ ВЕРНОЕ СОЕДИНЕНИЕ И ВЫБРАТЬ СХЕМУ PUBLIC===========
SET search_path TO public;

--======== ОСНОВНАЯ ЧАСТЬ ==============

--ЗАДАНИЕ №1
--Cделайте запрос к таблице payment. 
--Пронумеруйте все продажи от 1 до N по дате продажи.

select  p.payment_id ,
		p.payment_date, 
		row_number() over (order by p.payment_date)
FROM payment p 



--ЗАДАНИЕ №2
--Используя оконную функцию добавьте колонку с порядковым номером
--продажи для каждого покупателя,
--сортировка платежей должна быть по дате платежа.

select  p.payment_id ,
		p.payment_date, 
		p.customer_id, 
		row_number() over (partition by p.customer_id order by p.payment_date) 
FROM payment p 



--ЗАДАНИЕ №3
--Для каждого пользователя посчитайте нарастающим итогом сумму всех его платежей,
--сортировка платежей должна быть по дате платежа.

select 	p.customer_id ,
		p.payment_id ,
		p.payment_date ,
		amount ,
		sum(amount) over (partition by p.customer_id order by p.payment_date)
from payment p 



--ЗАДАНИЕ №4
--Для каждого покупателя выведите данные о его последней оплате аренде.

select 	vt.customer_id,
		vt.payment_id ,
		vt.payment_date,
		amount  
from (
select 	p.customer_id,
		p.payment_id ,
		p.payment_date,
		amount ,
		row_number() over(partition by p.customer_id order by p.payment_date desc)
from payment p) vt
where vt.row_number = 1


--======== ДОПОЛНИТЕЛЬНАЯ ЧАСТЬ ==============

--ЗАДАНИЕ №1
--С помощью оконной функции выведите для каждого сотрудника магазина
--стоимость продажи из предыдущей строки со значением по умолчанию 0.0
--с сортировкой по дате продажи




--ЗАДАНИЕ №2
--С помощью оконной функции выведите для каждого сотрудника сумму продаж за март 2007 года
--с нарастающим итогом по каждому сотруднику и по каждой дате продажи (дата без учета времени)
--с сортировкой по дате продажи




--ЗАДАНИЕ №3
--Для каждой страны определите и выведите одним SQL-запросом покупателей, которые попадают под условия:
-- 1. покупатель, арендовавший наибольшее количество фильмов
-- 2. покупатель, арендовавший фильмов на самую большую сумму
-- 3. покупатель, который последним арендовал фильм






